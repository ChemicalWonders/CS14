#ifndef __HASHMAP_H_
#define __HASHMAP_H_


#include <iostream>
#include <vector>
#include <cstdlib>
#include <string>

using namespace std;

enum curStat{freed, active, deactivated};
#define each(I) for(typeof(I.begin()) it = (I).begin(); it!=(I).end(); ++it)

template <typename t>

class Node{
    public:
        const string key;
        t value;
        curStat currentStatus;
        
    Node()
    :currentStatus(freed){}
    
    Node(string k, t val)
    :currentStatus(active), key(k), value(val)
    {}
    
    };
    
template <typename v>

class hashMap{
    
    private:
        vector <Node <v> > mappedValues;
        
    public:
        hashMap()
        : mappedValues(103)
        {}
        
        unsigned int hash (const string & s, int tableSize){
            unsigned int h= 0;
            each(s) h = 37*h + unsigned(*it);
            return h%tableSize;
        }
        
        unsigned int stride(const string & s, int tableSize){
            unsigned int h = 0;
            each(s) h = 31*h + unsigned (*it);
            return h & tableSize;
        }
        
        hashMap(const hashMap<v> & l){
            
            typename vector<Node<v> >:: iterator i = l.begin();
            typename vector<Node<v> >:: iterator j = mappedValues.begin();
            
            for (j != l.end(); ++i; ++j){
                j = i;
            }
            
        }
        
        hashMap & operator = (hashMap & l){
            typename vector<Node<v> >:: iterator i = l.begin();
            typename vector<Node<v> >:: iterator j = mappedValues.begin();
            
            for (j != l.end(); ++i; ++j){
                j = i;
            }
        }
            
        ~hashMap(){
            mappedValues.clear();
            }
        
        v& operator[] (string ki){
        
            }
        
        typename vector <Node < v > > ::iterator find(string l){
            for (typename vector< Node <v> >:: iterator i = begin();
            i < end(); ++i){
                if (l == i.key)
                    return i;
                    
                }
                return mappedValues.end();
            }
        
        typename vector <Node < v > > ::iterator begin(){
            return mappedValues.begin();
        }
        
        typename vector <Node < v > >::iterator end(){
            return mappedValues.end();
        }
    };

#endif
